#INSERTION SORT

[22,27,16,2,18,6] --> initial state
				 
27 > 22           --> comparing index[1] to index[0]
				  
[22,27,16,2,18,6] --> sorting does not change
				  
16 < 27           --> comparing index[2] to index[1]
				  
[22,16,27,2,18,6] --> replacing index[2] with index[1]
				  
16 < 22           --> comparing index[1] to index[0]
				  
[16,22,27,2,18,6] --> replacing index[1] with index[0]
				  
2 < 27            --> comparing index[3] to index[2]
				  
[16,22,2,27,18,6] --> replacing index[3] with index[2]

2 < 22            --> comparing index[2] to index[1]
                  
[16,2,22,27,18,6] --> replacing index[2] with index[1]
                  
2 < 16            --> comparing index[1] to index[0]
                  
[2,16,22,27,18,6] --> replacing index[1] with index[0]
                  
18 < 27           --> comparing index[4] to index[3]
                  
[2,16,22,18,27,6] --> replacing index[4] with index[3]
                  
18 < 22           --> comparing index[3] to index[2]
                  
[2,16,18,22,27,6] --> replacing index[3] with index[2]
                  
18 > 16           --> comparing index[2] to index[1]

[2,16,18,22,27,6] --> sorting does not change

6 < 27            --> comparing index[5] to index[4]
                  
[2,16,18,22,6,27] --> replacing index[5] with index[4]
                  
6 < 22            --> comparing index[4] to index[3]
                      
[2,16,18,6,22,27] --> replacing index[4] with index[3]
                  
6 < 18            --> comparing index[3] to index[2]
                      
[2,16,6,18,22,27] --> replacing index[3] with index[2]
                  
6 < 16            --> comparing index[2] to index[1]
                      
[2,6,16,18,22,27] --> replacing index[2] with index[1]

6 > 2             --> comparing index[1] to index[0]

[2,6,16,18,22,27] --> sorting does not change

Time Complexity : O(n^2)

[2,6,16,18,22,27] is an average case since number we seek is in the middle of the array as expected more probably.


#SELECTION SORT

0. [7,3,5,8,2,9,4,15,6]   --> initial state

1. [2,3,5,8,7,9,4,15,6]   --> compare every item right to index[0] and replace with smallest which is index[4]

2. [2,3,5,8,7,9,4,15,6]   --> compare every item right to index[1] but replace nothing

3. [2,3,4,8,7,9,5,15,6]   --> compare every item right to index[2] and replace with smallest which is index[6]

4. [2,3,5,6,7,9,4,15,8]   --> compare every item right to index[3] and replace with smallest which is index[8]
